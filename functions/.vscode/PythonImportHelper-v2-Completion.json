[
    {
        "label": "verify_firebase_auth",
        "importPath": "shared.get_signed_in_user",
        "description": "shared.get_signed_in_user",
        "isExtraImport": true,
        "detail": "shared.get_signed_in_user",
        "documentation": {}
    },
    {
        "label": "get_signed_in_user",
        "importPath": "shared.get_signed_in_user",
        "description": "shared.get_signed_in_user",
        "isExtraImport": true,
        "detail": "shared.get_signed_in_user",
        "documentation": {}
    },
    {
        "label": "get_signed_in_user",
        "importPath": "shared.get_signed_in_user",
        "description": "shared.get_signed_in_user",
        "isExtraImport": true,
        "detail": "shared.get_signed_in_user",
        "documentation": {}
    },
    {
        "label": "get_signed_in_user",
        "importPath": "shared.get_signed_in_user",
        "description": "shared.get_signed_in_user",
        "isExtraImport": true,
        "detail": "shared.get_signed_in_user",
        "documentation": {}
    },
    {
        "label": "get_signed_in_user",
        "importPath": "shared.get_signed_in_user",
        "description": "shared.get_signed_in_user",
        "isExtraImport": true,
        "detail": "shared.get_signed_in_user",
        "documentation": {}
    },
    {
        "label": "on_request",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "on_call",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "CallableRequest",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "on_request",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "on_call",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "CallableRequest",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "on_call",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "CallableRequest",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "HttpsError",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "FunctionsErrorCode",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "HttpsError",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "FunctionsErrorCode",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "HttpsError",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "FunctionsErrorCode",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "CallableRequest",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "HttpsError",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "FunctionsErrorCode",
        "importPath": "firebase_functions.https_fn",
        "description": "firebase_functions.https_fn",
        "isExtraImport": true,
        "detail": "firebase_functions.https_fn",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "firestore_client",
        "description": "firestore_client",
        "isExtraImport": true,
        "detail": "firestore_client",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "firestore_client",
        "description": "firestore_client",
        "isExtraImport": true,
        "detail": "firestore_client",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "firestore_client",
        "description": "firestore_client",
        "isExtraImport": true,
        "detail": "firestore_client",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "firestore_client",
        "description": "firestore_client",
        "isExtraImport": true,
        "detail": "firestore_client",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "firestore_client",
        "description": "firestore_client",
        "isExtraImport": true,
        "detail": "firestore_client",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "logger_config",
        "description": "logger_config",
        "isExtraImport": true,
        "detail": "logger_config",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "logger_config",
        "description": "logger_config",
        "isExtraImport": true,
        "detail": "logger_config",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "logger_config",
        "description": "logger_config",
        "isExtraImport": true,
        "detail": "logger_config",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "logger_config",
        "description": "logger_config",
        "isExtraImport": true,
        "detail": "logger_config",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "logger_config",
        "description": "logger_config",
        "isExtraImport": true,
        "detail": "logger_config",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "logger_config",
        "description": "logger_config",
        "isExtraImport": true,
        "detail": "logger_config",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "logger_config",
        "description": "logger_config",
        "isExtraImport": true,
        "detail": "logger_config",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "logger_config",
        "description": "logger_config",
        "isExtraImport": true,
        "detail": "logger_config",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "logger_config",
        "description": "logger_config",
        "isExtraImport": true,
        "detail": "logger_config",
        "documentation": {}
    },
    {
        "label": "json,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json.",
        "description": "json.",
        "detail": "json.",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "FIREBASE_REGION",
        "importPath": "shared.env",
        "description": "shared.env",
        "isExtraImport": true,
        "detail": "shared.env",
        "documentation": {}
    },
    {
        "label": "SESSIONIZE_EVENT_ID",
        "importPath": "shared.env",
        "description": "shared.env",
        "isExtraImport": true,
        "detail": "shared.env",
        "documentation": {}
    },
    {
        "label": "FIREBASE_REGION",
        "importPath": "shared.env",
        "description": "shared.env",
        "isExtraImport": true,
        "detail": "shared.env",
        "documentation": {}
    },
    {
        "label": "FIREBASE_REGION",
        "importPath": "shared.env",
        "description": "shared.env",
        "isExtraImport": true,
        "detail": "shared.env",
        "documentation": {}
    },
    {
        "label": "FIREBASE_REGION",
        "importPath": "shared.env",
        "description": "shared.env",
        "isExtraImport": true,
        "detail": "shared.env",
        "documentation": {}
    },
    {
        "label": "FIREBASE_REGION",
        "importPath": "shared.env",
        "description": "shared.env",
        "isExtraImport": true,
        "detail": "shared.env",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "features.speakers.types.speaker",
        "description": "features.speakers.types.speaker",
        "isExtraImport": true,
        "detail": "features.speakers.types.speaker",
        "documentation": {}
    },
    {
        "label": "Social",
        "importPath": "features.speakers.types.speaker",
        "description": "features.speakers.types.speaker",
        "isExtraImport": true,
        "detail": "features.speakers.types.speaker",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "features.speakers.types.speaker",
        "description": "features.speakers.types.speaker",
        "isExtraImport": true,
        "detail": "features.speakers.types.speaker",
        "documentation": {}
    },
    {
        "label": "Social",
        "importPath": "features.speakers.types.speaker",
        "description": "features.speakers.types.speaker",
        "isExtraImport": true,
        "detail": "features.speakers.types.speaker",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "features.sessions.types.session",
        "description": "features.sessions.types.session",
        "isExtraImport": true,
        "detail": "features.sessions.types.session",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "features.sessions.types.session",
        "description": "features.sessions.types.session",
        "isExtraImport": true,
        "detail": "features.sessions.types.session",
        "documentation": {}
    },
    {
        "label": "NamedEntity",
        "importPath": "features.sessions.types.session",
        "description": "features.sessions.types.session",
        "isExtraImport": true,
        "detail": "features.sessions.types.session",
        "documentation": {}
    },
    {
        "label": "SessionSpeaker",
        "importPath": "features.sessions.types.session",
        "description": "features.sessions.types.session",
        "isExtraImport": true,
        "detail": "features.sessions.types.session",
        "documentation": {}
    },
    {
        "label": "fetch_speakers",
        "importPath": "features.speakers.fetch_from_sessionize",
        "description": "features.speakers.fetch_from_sessionize",
        "isExtraImport": true,
        "detail": "features.speakers.fetch_from_sessionize",
        "documentation": {}
    },
    {
        "label": "fetch_sessions",
        "importPath": "features.sessions.fetch_from_sessionize",
        "description": "features.sessions.fetch_from_sessionize",
        "isExtraImport": true,
        "detail": "features.sessions.fetch_from_sessionize",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "firestore",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "messaging",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "firestore",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "firestore",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "firestore",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "initialize_app",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "credentials",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "SERVER_TIMESTAMP",
        "importPath": "google.cloud.firestore",
        "description": "google.cloud.firestore",
        "isExtraImport": true,
        "detail": "google.cloud.firestore",
        "documentation": {}
    },
    {
        "label": "Increment",
        "importPath": "google.cloud.firestore",
        "description": "google.cloud.firestore",
        "isExtraImport": true,
        "detail": "google.cloud.firestore",
        "documentation": {}
    },
    {
        "label": "Increment",
        "importPath": "google.cloud.firestore",
        "description": "google.cloud.firestore",
        "isExtraImport": true,
        "detail": "google.cloud.firestore",
        "documentation": {}
    },
    {
        "label": "SERVER_TIMESTAMP",
        "importPath": "google.cloud.firestore",
        "description": "google.cloud.firestore",
        "isExtraImport": true,
        "detail": "google.cloud.firestore",
        "documentation": {}
    },
    {
        "label": "SERVER_TIMESTAMP",
        "importPath": "google.cloud.firestore",
        "description": "google.cloud.firestore",
        "isExtraImport": true,
        "detail": "google.cloud.firestore",
        "documentation": {}
    },
    {
        "label": "Points",
        "importPath": "features.points.types.points",
        "description": "features.points.types.points",
        "isExtraImport": true,
        "detail": "features.points.types.points",
        "documentation": {}
    },
    {
        "label": "Points",
        "importPath": "features.points.types.points",
        "description": "features.points.types.points",
        "isExtraImport": true,
        "detail": "features.points.types.points",
        "documentation": {}
    },
    {
        "label": "Points",
        "importPath": "features.points.types.points",
        "description": "features.points.types.points",
        "isExtraImport": true,
        "detail": "features.points.types.points",
        "documentation": {}
    },
    {
        "label": "PointsTypeEnum",
        "importPath": "features.points.types.points_type_enum",
        "description": "features.points.types.points_type_enum",
        "isExtraImport": true,
        "detail": "features.points.types.points_type_enum",
        "documentation": {}
    },
    {
        "label": "PointsTypeEnum",
        "importPath": "features.points.types.points_type_enum",
        "description": "features.points.types.points_type_enum",
        "isExtraImport": true,
        "detail": "features.points.types.points_type_enum",
        "documentation": {}
    },
    {
        "label": "PointsTypeEnum",
        "importPath": "features.points.types.points_type_enum",
        "description": "features.points.types.points_type_enum",
        "isExtraImport": true,
        "detail": "features.points.types.points_type_enum",
        "documentation": {}
    },
    {
        "label": "firestore_fn",
        "importPath": "firebase_functions",
        "description": "firebase_functions",
        "isExtraImport": true,
        "detail": "firebase_functions",
        "documentation": {}
    },
    {
        "label": "on_call",
        "importPath": "firebase_functions",
        "description": "firebase_functions",
        "isExtraImport": true,
        "detail": "firebase_functions",
        "documentation": {}
    },
    {
        "label": "CallableRequest",
        "importPath": "firebase_functions",
        "description": "firebase_functions",
        "isExtraImport": true,
        "detail": "firebase_functions",
        "documentation": {}
    },
    {
        "label": "scheduler_fn",
        "importPath": "firebase_functions",
        "description": "firebase_functions",
        "isExtraImport": true,
        "detail": "firebase_functions",
        "documentation": {}
    },
    {
        "label": "https_fn",
        "importPath": "firebase_functions",
        "description": "firebase_functions",
        "isExtraImport": true,
        "detail": "firebase_functions",
        "documentation": {}
    },
    {
        "label": "auth_fn",
        "importPath": "firebase_functions",
        "description": "firebase_functions",
        "isExtraImport": true,
        "detail": "firebase_functions",
        "documentation": {}
    },
    {
        "label": "https_fn",
        "importPath": "firebase_functions",
        "description": "firebase_functions",
        "isExtraImport": true,
        "detail": "firebase_functions",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Quest",
        "importPath": "features.quests.types.quest",
        "description": "features.quests.types.quest",
        "isExtraImport": true,
        "detail": "features.quests.types.quest",
        "documentation": {}
    },
    {
        "label": "Answer",
        "importPath": "features.quests.types.answer",
        "description": "features.quests.types.answer",
        "isExtraImport": true,
        "detail": "features.quests.types.answer",
        "documentation": {}
    },
    {
        "label": "Answer",
        "importPath": "features.quests.types.answer",
        "description": "features.quests.types.answer",
        "isExtraImport": true,
        "detail": "features.quests.types.answer",
        "documentation": {}
    },
    {
        "label": "LocalizedField",
        "importPath": "features.quests.types.localized_field",
        "description": "features.quests.types.localized_field",
        "isExtraImport": true,
        "detail": "features.quests.types.localized_field",
        "documentation": {}
    },
    {
        "label": "LocalizedField",
        "importPath": "features.quests.types.localized_field",
        "description": "features.quests.types.localized_field",
        "isExtraImport": true,
        "detail": "features.quests.types.localized_field",
        "documentation": {}
    },
    {
        "label": "LocalizedField",
        "importPath": "features.quests.types.localized_field",
        "description": "features.quests.types.localized_field",
        "isExtraImport": true,
        "detail": "features.quests.types.localized_field",
        "documentation": {}
    },
    {
        "label": "QuestTypeEnum",
        "importPath": "features.quests.types.quest_type_enum",
        "description": "features.quests.types.quest_type_enum",
        "isExtraImport": true,
        "detail": "features.quests.types.quest_type_enum",
        "documentation": {}
    },
    {
        "label": "QuestSubTypeEnum",
        "importPath": "features.quests.types.quest_sub_type_enum",
        "description": "features.quests.types.quest_sub_type_enum",
        "isExtraImport": true,
        "detail": "features.quests.types.quest_sub_type_enum",
        "documentation": {}
    },
    {
        "label": "PromptFunctions",
        "importPath": "features.quests.prompt_functions",
        "description": "features.quests.prompt_functions",
        "isExtraImport": true,
        "detail": "features.quests.prompt_functions",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "features.sessions.types",
        "description": "features.sessions.types",
        "isExtraImport": true,
        "detail": "features.sessions.types",
        "documentation": {}
    },
    {
        "label": "get_signed_in_user",
        "importPath": "shared",
        "description": "shared",
        "isExtraImport": true,
        "detail": "shared",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "FieldFilter",
        "importPath": "google.cloud.firestore_v1.base_query",
        "description": "google.cloud.firestore_v1.base_query",
        "isExtraImport": true,
        "detail": "google.cloud.firestore_v1.base_query",
        "documentation": {}
    },
    {
        "label": "get_localized_string",
        "importPath": "shared.localization",
        "description": "shared.localization",
        "isExtraImport": true,
        "detail": "shared.localization",
        "documentation": {}
    },
    {
        "label": "TShirtConfiguration",
        "importPath": "features.user.types",
        "description": "features.user.types",
        "isExtraImport": true,
        "detail": "features.user.types",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "features.user.types.user",
        "description": "features.user.types.user",
        "isExtraImport": true,
        "detail": "features.user.types.user",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "UserRecord",
        "importPath": "firebase_admin._user_mgt",
        "description": "firebase_admin._user_mgt",
        "isExtraImport": true,
        "detail": "firebase_admin._user_mgt",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "set_global_options",
        "importPath": "firebase_functions.options",
        "description": "firebase_functions.options",
        "isExtraImport": true,
        "detail": "firebase_functions.options",
        "documentation": {}
    },
    {
        "label": "t_shirt_pickup",
        "importPath": "features.user.t_shirt_pickup",
        "description": "features.user.t_shirt_pickup",
        "isExtraImport": true,
        "detail": "features.user.t_shirt_pickup",
        "documentation": {}
    },
    {
        "label": "t_shirt_notification_schedule",
        "importPath": "features.user.t_shirt_notification",
        "description": "features.user.t_shirt_notification",
        "isExtraImport": true,
        "detail": "features.user.t_shirt_notification",
        "documentation": {}
    },
    {
        "label": "scan_other_attendee",
        "importPath": "features.points.scan_other_attendee",
        "description": "features.points.scan_other_attendee",
        "isExtraImport": true,
        "detail": "features.points.scan_other_attendee",
        "documentation": {}
    },
    {
        "label": "submit_answer",
        "importPath": "features.points.submit_answer",
        "description": "features.points.submit_answer",
        "isExtraImport": true,
        "detail": "features.points.submit_answer",
        "documentation": {}
    },
    {
        "label": "assign_points",
        "importPath": "features.points.assign_points",
        "description": "features.points.assign_points",
        "isExtraImport": true,
        "detail": "features.points.assign_points",
        "documentation": {}
    },
    {
        "label": "fetch_from_sessionize",
        "importPath": "features.facade.sessionize",
        "description": "features.facade.sessionize",
        "isExtraImport": true,
        "detail": "features.facade.sessionize",
        "documentation": {}
    },
    {
        "label": "get_event_id",
        "kind": 2,
        "importPath": "features.facade.sessionize",
        "description": "features.facade.sessionize",
        "peekOfCode": "def get_event_id(request: Request) -> str:\n    try:\n        payload = request.get_json(silent=True) or {}\n    except Exception as e:\n        logger.error(f\"Errore parsing JSON: {e}\")\n        payload = {}\n    event_id = payload.get(\"event_id\", None)\n    if event_id is None and SESSIONIZE_EVENT_ID is None:\n        logger.error(\"You Have To Specify an 'event_id' in Your Payload Or You Have To Set 'SESSIONIZE_EVENT_ID' venv\")\n        raise Exception(\"Can't Find An Event ID\")",
        "detail": "features.facade.sessionize",
        "documentation": {}
    },
    {
        "label": "upload_to_sessionize",
        "kind": 2,
        "importPath": "features.facade.sessionize",
        "description": "features.facade.sessionize",
        "peekOfCode": "def upload_to_sessionize(data: List[Session | Speaker], collection_name: str) -> None:\n    try:\n        batch = firestore_client.batch()\n        for d in data:\n            doc_ref = firestore_client.collection(collection_name).document(d.id)\n            session_dict = d.model_dump()\n            batch.set(doc_ref, session_dict)\n        batch.commit()\n        logger.info(f\"Uploaded {len(data)} sessions to Firestore.\")\n    except Exception as e:",
        "detail": "features.facade.sessionize",
        "documentation": {}
    },
    {
        "label": "fetch_from_sessionize",
        "kind": 2,
        "importPath": "features.facade.sessionize",
        "description": "features.facade.sessionize",
        "peekOfCode": "def fetch_from_sessionize(request: Request) -> bool:\n    # user_info = verify_firebase_auth(request=request)\n    # logger.info(f\"Logged User Info: {user_info}\")\n    event_id = get_event_id(request)\n    speakers = fetch_speakers(event_id=event_id)\n    upload_to_sessionize(data=speakers, collection_name=\"speakers\")\n    sessions = fetch_sessions(event_id=event_id)\n    for session in sessions:\n        for session_speaker in session.speakers:\n            for speaker in speakers:",
        "detail": "features.facade.sessionize",
        "documentation": {}
    },
    {
        "label": "Points",
        "kind": 6,
        "importPath": "features.points.types.points",
        "description": "features.points.types.points",
        "peekOfCode": "class Points(BaseModel):\n    \"\"\"Model representing points assigned to a user.\"\"\"\n    type: str\n    points: int\n    assigned_by: Optional[str] = None\n    assigned_from: Optional[str] = None\n    assigned_at: Any\n    quest: Optional[str] = None",
        "detail": "features.points.types.points",
        "documentation": {}
    },
    {
        "label": "PointsTypeEnum",
        "kind": 6,
        "importPath": "features.points.types.points_type_enum",
        "description": "features.points.types.points_type_enum",
        "peekOfCode": "class PointsTypeEnum(str, Enum):\n    quest = \"quest\"\n    staff = \"staff\"\n    community = \"community\"",
        "detail": "features.points.types.points_type_enum",
        "documentation": {}
    },
    {
        "label": "assign_points",
        "kind": 2,
        "importPath": "features.points.assign_points",
        "description": "features.points.assign_points",
        "peekOfCode": "def assign_points(request: CallableRequest) -> bool:\n    logged_user = get_signed_in_user(request)\n    logger.info(f\"Assigning points: {request.data}\")\n    assigned_points = request.data.get(\"points\")\n    point_type = request.data.get(\"type\")\n    quest_id = request.data.get(\"quest\", None)\n    user_ids = request.data.get(\"users\", [])\n    users = [auth.get_user(uid) for uid in user_ids]\n    filtered_users = []\n    if point_type == PointsTypeEnum.staff or point_type == PointsTypeEnum.community:",
        "detail": "features.points.assign_points",
        "documentation": {}
    },
    {
        "label": "user_points_sentinel",
        "kind": 2,
        "importPath": "features.points.points_manager",
        "description": "features.points.points_manager",
        "peekOfCode": "def user_points_sentinel(event: firestore_fn.Event[firestore_fn.DocumentSnapshot]) -> None:\n    \"\"\"\n    Function triggered when a points document is written in a user's points subcollection.\n    Updates the user's total points.\n    \"\"\"\n    current_value = event.data.after\n    prev_value = event.data.before\n    current_points, prev_points = 0, 0\n    if current_value and current_value.exists:\n        current_points = current_value.to_dict().get(\"points\", 0)",
        "detail": "features.points.points_manager",
        "documentation": {}
    },
    {
        "label": "ScanOtherAttendeePayload",
        "kind": 6,
        "importPath": "features.points.scan_other_attendee",
        "description": "features.points.scan_other_attendee",
        "peekOfCode": "class ScanOtherAttendeePayload(BaseModel):\n    points: int\n    scanned_value: str\n@on_call(region=FIREBASE_REGION)\ndef scan_other_attendee(req: CallableRequest) -> bool:\n    payload = req.data\n    logger.debug(f\"Input Payload: {payload}\")\n    payload = ScanOtherAttendeePayload(**payload)\n    logged_user = get_signed_in_user(request=req)\n    scanned_user = auth.get_user(uid=json.loads(payload.scanned_value)[\"uid\"])",
        "detail": "features.points.scan_other_attendee",
        "documentation": {}
    },
    {
        "label": "scan_other_attendee",
        "kind": 2,
        "importPath": "features.points.scan_other_attendee",
        "description": "features.points.scan_other_attendee",
        "peekOfCode": "def scan_other_attendee(req: CallableRequest) -> bool:\n    payload = req.data\n    logger.debug(f\"Input Payload: {payload}\")\n    payload = ScanOtherAttendeePayload(**payload)\n    logged_user = get_signed_in_user(request=req)\n    scanned_user = auth.get_user(uid=json.loads(payload.scanned_value)[\"uid\"])\n    if scanned_user:\n        user_uid = scanned_user.uid\n        logged_uid = logged_user.uid\n        user_point_snap = (firestore_client.collection(\"users\")",
        "detail": "features.points.scan_other_attendee",
        "documentation": {}
    },
    {
        "label": "submit_answer",
        "kind": 2,
        "importPath": "features.points.submit_answer",
        "description": "features.points.submit_answer",
        "peekOfCode": "def submit_answer(req: CallableRequest) -> bool:\n    logged_user = get_signed_in_user(request=req)\n    quest_id = req.data.quest\n    answers = req.data.answers\n    quest_snap = (firestore_client\n                  .collection(\"quests\")\n                  .document(quest_id)\n                  .get())\n    if not quest_snap.exists:\n        raise HttpsError(code=FunctionsErrorCode.NOT_FOUND, message=\"Quest not found\")",
        "detail": "features.points.submit_answer",
        "documentation": {}
    },
    {
        "label": "Answer",
        "kind": 6,
        "importPath": "features.quests.types.answer",
        "description": "features.quests.types.answer",
        "peekOfCode": "class Answer(TypedDict):\n    id: int\n    text: LocalizedField\n    isCorrect: bool",
        "detail": "features.quests.types.answer",
        "documentation": {}
    },
    {
        "label": "LocalizedField",
        "kind": 5,
        "importPath": "features.quests.types.localized_field",
        "description": "features.quests.types.localized_field",
        "peekOfCode": "LocalizedField = Dict[str, str]",
        "detail": "features.quests.types.localized_field",
        "documentation": {}
    },
    {
        "label": "Quest",
        "kind": 6,
        "importPath": "features.quests.types.quest",
        "description": "features.quests.types.quest",
        "peekOfCode": "class Quest(BaseModel):\n    id: str\n    title: Optional[LocalizedField] = None\n    description: LocalizedField\n    points: List[int]\n    validityStart: datetime\n    validityEnd: datetime\n    executionTime: int\n    type: QuestTypeEnum\n    subType: Optional[QuestSubTypeEnum] = None",
        "detail": "features.quests.types.quest",
        "documentation": {}
    },
    {
        "label": "QuestSubTypeEnum",
        "kind": 6,
        "importPath": "features.quests.types.quest_sub_type_enum",
        "description": "features.quests.types.quest_sub_type_enum",
        "peekOfCode": "class QuestSubTypeEnum(str, Enum):\n    QR_CODE = \"qrCode\",\n    PROMPTED = \"prompted\",",
        "detail": "features.quests.types.quest_sub_type_enum",
        "documentation": {}
    },
    {
        "label": "QuestTypeEnum",
        "kind": 6,
        "importPath": "features.quests.types.quest_type_enum",
        "description": "features.quests.types.quest_type_enum",
        "peekOfCode": "class QuestTypeEnum(str, Enum):\n    ACTOR = \"actor\",\n    QUIZ = \"quiz\",\n    SOCIAL = \"social\",\n    COMMUNITY = \"community\"",
        "detail": "features.quests.types.quest_type_enum",
        "documentation": {}
    },
    {
        "label": "PromptFunctions",
        "kind": 6,
        "importPath": "features.quests.prompt_functions",
        "description": "features.quests.prompt_functions",
        "peekOfCode": "class PromptFunctions(str, Enum):\n    LOVE_WORDS = \"loveWords\"\nprompt_functions_list = {\n    PromptFunctions.LOVE_WORDS: love_words\n}",
        "detail": "features.quests.prompt_functions",
        "documentation": {}
    },
    {
        "label": "prompt_functions_list",
        "kind": 5,
        "importPath": "features.quests.prompt_functions",
        "description": "features.quests.prompt_functions",
        "peekOfCode": "prompt_functions_list = {\n    PromptFunctions.LOVE_WORDS: love_words\n}",
        "detail": "features.quests.prompt_functions",
        "documentation": {}
    },
    {
        "label": "NamedEntity",
        "kind": 6,
        "importPath": "features.sessions.types.session",
        "description": "features.sessions.types.session",
        "peekOfCode": "class NamedEntity(BaseModel):\n    id: int\n    name: str\nclass SessionSpeaker(BaseModel):\n    id: str\n    name: str\n    bio: Optional[str]\n    profilePicture: Optional[str]\n    links: List[Social]\n    tagLine: Optional[str]",
        "detail": "features.sessions.types.session",
        "documentation": {}
    },
    {
        "label": "SessionSpeaker",
        "kind": 6,
        "importPath": "features.sessions.types.session",
        "description": "features.sessions.types.session",
        "peekOfCode": "class SessionSpeaker(BaseModel):\n    id: str\n    name: str\n    bio: Optional[str]\n    profilePicture: Optional[str]\n    links: List[Social]\n    tagLine: Optional[str]\nclass Session(BaseModel):\n    id: str\n    title: str",
        "detail": "features.sessions.types.session",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 6,
        "importPath": "features.sessions.types.session",
        "description": "features.sessions.types.session",
        "peekOfCode": "class Session(BaseModel):\n    id: str\n    title: str\n    description: Optional[str]\n    startsAt: str\n    endsAt: str\n    speakers: List[SessionSpeaker]\n    room: Optional[NamedEntity]\n    sessionFormat: Optional[NamedEntity]\n    tracks: List[NamedEntity]",
        "detail": "features.sessions.types.session",
        "documentation": {}
    },
    {
        "label": "transform_sessions",
        "kind": 2,
        "importPath": "features.sessions.fetch_from_sessionize",
        "description": "features.sessions.fetch_from_sessionize",
        "peekOfCode": "def transform_sessions(raw_data: list) -> List[Session]:\n    category_handlers = {\n        \"Session format\": lambda items: (\"sessionFormat\", NamedEntity(id=items[0][\"id\"], name=items[0][\"name\"])),\n        \"Track\": lambda items: (\"tracks\", [NamedEntity(id=item[\"id\"], name=item[\"name\"]) for item in items]),\n        \"Level\": lambda items: (\"level\", NamedEntity(id=items[0][\"id\"], name=items[0][\"name\"])),\n        \"Language\": lambda items: (\"language\", NamedEntity(id=items[0][\"id\"], name=items[0][\"name\"])),\n        \"Tags\": lambda items: (\"tags\", [NamedEntity(id=item[\"id\"], name=item[\"name\"]) for item in items])\n    }\n    result = []\n    for group in raw_data:",
        "detail": "features.sessions.fetch_from_sessionize",
        "documentation": {}
    },
    {
        "label": "fetch_sessions",
        "kind": 2,
        "importPath": "features.sessions.fetch_from_sessionize",
        "description": "features.sessions.fetch_from_sessionize",
        "peekOfCode": "def fetch_sessions(event_id: str) -> List[Session]:\n    url = f\"https://sessionize.com/api/v2/{event_id}/view/\" + \"Sessions\"\n    logger.info(f\"Downloading Sessions From: {url}\")\n    try:\n        response = requests.get(url, timeout=10)\n        if response.status_code == 200:\n            logger.info(\"Sessions JSON Fetched\")\n            try:\n                raw_data = response.json()\n                return transform_sessions(raw_data=raw_data)",
        "detail": "features.sessions.fetch_from_sessionize",
        "documentation": {}
    },
    {
        "label": "save_favorite_session",
        "kind": 2,
        "importPath": "features.sessions.save_favorite_session",
        "description": "features.sessions.save_favorite_session",
        "peekOfCode": "def save_favorite_session(request: CallableRequest) -> bool:\n    logged_user = get_signed_in_user(request)\n    session_id = request.data.get(\"sessionId\")",
        "detail": "features.sessions.save_favorite_session",
        "documentation": {}
    },
    {
        "label": "Social",
        "kind": 6,
        "importPath": "features.speakers.types.speaker",
        "description": "features.speakers.types.speaker",
        "peekOfCode": "class Social(BaseModel):\n    title: str\n    url: str\nclass Speaker(BaseModel):\n    id: str\n    firstName: str\n    lastName: str\n    bio: str\n    profilePicture: Optional[str]\n    links: List[Social]",
        "detail": "features.speakers.types.speaker",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "kind": 6,
        "importPath": "features.speakers.types.speaker",
        "description": "features.speakers.types.speaker",
        "peekOfCode": "class Speaker(BaseModel):\n    id: str\n    firstName: str\n    lastName: str\n    bio: str\n    profilePicture: Optional[str]\n    links: List[Social]\n    tagLine: str",
        "detail": "features.speakers.types.speaker",
        "documentation": {}
    },
    {
        "label": "transform_speakers",
        "kind": 2,
        "importPath": "features.speakers.fetch_from_sessionize",
        "description": "features.speakers.fetch_from_sessionize",
        "peekOfCode": "def transform_speakers(raw_data: list) -> List[Speaker]:\n    result = []\n    for speaker in raw_data:\n        pp_speaker = {\n            \"id\": speaker.get(\"id\"),\n            \"firstName\": speaker.get(\"firstName\"),\n            \"lastName\": speaker.get(\"lastName\"),\n            \"bio\": speaker.get(\"bio\"),\n            \"profilePicture\": speaker.get(\"profilePicture\", None),\n            \"tagLine\": speaker.get(\"tagLine\"),",
        "detail": "features.speakers.fetch_from_sessionize",
        "documentation": {}
    },
    {
        "label": "fetch_speakers",
        "kind": 2,
        "importPath": "features.speakers.fetch_from_sessionize",
        "description": "features.speakers.fetch_from_sessionize",
        "peekOfCode": "def fetch_speakers(event_id: str) -> List[Speaker]:\n    url = f\"https://sessionize.com/api/v2/{event_id}/view/\" + \"Speakers\"\n    logger.info(f\"Downloading Speakers From: {url}\")\n    try:\n        response = requests.get(url, timeout=10)\n        if response.status_code == 200:\n            logger.info(\"Speakers JSON Fetched\")\n            try:\n                raw_data = response.json()\n                return transform_speakers(raw_data=raw_data)",
        "detail": "features.speakers.fetch_from_sessionize",
        "documentation": {}
    },
    {
        "label": "TimeBand",
        "kind": 6,
        "importPath": "features.user.types.t_shirt_config",
        "description": "features.user.types.t_shirt_config",
        "peekOfCode": "class TimeBand:\n    \"\"\"Represents a time period with start and end timestamps.\"\"\"\n    def __init__(self, start: datetime, end: datetime):\n        self.start = start\n        self.end = end\n    def is_current_time_in_band(self) -> bool:\n        \"\"\"Check if the current time is within this time band.\"\"\"\n        now = datetime.now()\n        return self.start.timestamp() <= now.timestamp() <= self.end.timestamp()\nclass TShirtConfiguration:",
        "detail": "features.user.types.t_shirt_config",
        "documentation": {}
    },
    {
        "label": "TShirtConfiguration",
        "kind": 6,
        "importPath": "features.user.types.t_shirt_config",
        "description": "features.user.types.t_shirt_config",
        "peekOfCode": "class TShirtConfiguration:\n    \"\"\"Model representing the T-shirt configuration in Firestore.\"\"\"\n    def __init__(\n        self,\n        t_shirt_pickup_enabled: bool = False,\n        default_pool: int = 0,\n        boost_pool: int = 0,\n        boost_time_bands: List[TimeBand] = None\n    ):\n        self.t_shirt_pickup_enabled = t_shirt_pickup_enabled",
        "detail": "features.user.types.t_shirt_config",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "features.user.types.user",
        "description": "features.user.types.user",
        "peekOfCode": "class User:\n    \"\"\"Model representing a user in the application.\"\"\"\n    def __init__(\n        self,\n        uid: str,\n        email: str,\n        display_name: Optional[str] = None,\n        photo_url: Optional[str] = None,\n        language: str = \"en\",\n        created_at: datetime = None,",
        "detail": "features.user.types.user",
        "documentation": {}
    },
    {
        "label": "t_shirt_notification_schedule",
        "kind": 2,
        "importPath": "features.user.t_shirt_notification",
        "description": "features.user.t_shirt_notification",
        "peekOfCode": "def t_shirt_notification_schedule(event: scheduler_fn.ScheduledEvent) -> None:\n    \"\"\"\n    Scheduled function that runs every 10 minutes between 10:00 and 18:00\n    on November 8th and 9th to send t-shirt pickup notifications.\n    \"\"\"\n    send_t_shirt_notification()\n    logging.info(\"T-shirt notification schedule executed\")",
        "detail": "features.user.t_shirt_notification",
        "documentation": {}
    },
    {
        "label": "t_shirt_pickup",
        "kind": 2,
        "importPath": "features.user.t_shirt_pickup",
        "description": "features.user.t_shirt_pickup",
        "peekOfCode": "def t_shirt_pickup(request: https_fn.CallableRequest) -> bool:\n    \"\"\"\n    Cloud function to mark a user's t-shirt as picked up.\n    Can only be called by staff members.\n    Args:\n        request: Contains the auth context and the user ID to mark\n    Returns:\n        True if successful\n    Raises:\n        HttpsError: If user is not staff or user ID is not provided",
        "detail": "features.user.t_shirt_pickup",
        "documentation": {}
    },
    {
        "label": "on_user_delete",
        "kind": 2,
        "importPath": "features.user.user_manager",
        "description": "features.user.user_manager",
        "peekOfCode": "def on_user_delete(event: auth_fn.AuthBlockingEvent) -> None:\n    \"\"\"\n    Function triggered when a user is deleted from Firebase Auth.\n    Deletes the user document from the Firestore database.\n    \"\"\"\n    user = event.data\n    batch = firestore.client().batch()\n    user_ref = firestore.client().collection(\"users\").document(user.uid)\n    # Add here the documents were the user is referenced and delete them\n    batch.delete(user_ref)",
        "detail": "features.user.user_manager",
        "documentation": {}
    },
    {
        "label": "on_user_create",
        "kind": 2,
        "importPath": "features.user.user_manager",
        "description": "features.user.user_manager",
        "peekOfCode": "def on_user_create(event: auth_fn.AuthBlockingEvent) -> None:\n    \"\"\"\n    Function triggered when a new user is created in Firebase Auth.\n    Creates a user document in the Firestore database.\n    \"\"\"\n    auth_user = event.data\n    user = User.from_auth_user(auth_user)\n    firestore.client().collection(\"users\").document(user.uid).set(user.to_dict())\n    logging.info(f\"Created user {user.uid} in Firestore\")",
        "detail": "features.user.user_manager",
        "documentation": {}
    },
    {
        "label": "FIREBASE_REGION",
        "kind": 5,
        "importPath": "shared.env",
        "description": "shared.env",
        "peekOfCode": "FIREBASE_REGION = os.environ.get(\"FIREBASE_REGION\", \"europe-west3\")\nSESSIONIZE_EVENT_ID = os.environ.get(\"SESSIONIZE_EVENT_ID\", None)",
        "detail": "shared.env",
        "documentation": {}
    },
    {
        "label": "SESSIONIZE_EVENT_ID",
        "kind": 5,
        "importPath": "shared.env",
        "description": "shared.env",
        "peekOfCode": "SESSIONIZE_EVENT_ID = os.environ.get(\"SESSIONIZE_EVENT_ID\", None)",
        "detail": "shared.env",
        "documentation": {}
    },
    {
        "label": "get_signed_in_user",
        "kind": 2,
        "importPath": "shared.get_signed_in_user",
        "description": "shared.get_signed_in_user",
        "peekOfCode": "def get_signed_in_user(request: CallableRequest) -> UserRecord:\n    \"\"\"\n    Function to get the signed-in user from the request.\n    Args:\n        request: The request object containing the auth context.\n    Returns:\n        The signed-in user data or an error message.\n    \"\"\"\n    uid = getattr(request.auth, \"uid\", None)\n    if not uid:",
        "detail": "shared.get_signed_in_user",
        "documentation": {}
    },
    {
        "label": "verify_firebase_auth",
        "kind": 2,
        "importPath": "shared.get_signed_in_user",
        "description": "shared.get_signed_in_user",
        "peekOfCode": "def verify_firebase_auth(request):\n    auth_header = request.headers.get(\"Authorization\")\n    if not auth_header or not auth_header.startswith(\"Bearer \"):\n        logger.error(\"Missing Authorization header.\")\n        raise HttpsError(code=FunctionsErrorCode.UNAUTHENTICATED, message=\"Missing Authorization header.\")\n    id_token = auth_header.split(\"Bearer \")[1]\n    try:\n        decoded = auth.verify_id_token(id_token)\n        return decoded\n    except Exception:",
        "detail": "shared.get_signed_in_user",
        "documentation": {}
    },
    {
        "label": "get_localized_string",
        "kind": 2,
        "importPath": "shared.localization",
        "description": "shared.localization",
        "peekOfCode": "def get_localized_string(language: str = \"en\") -> Dict[str, str]:\n    \"\"\"\n    Get localized strings for the specified language.\n    Args:\n        language: The language code to use (defaults to 'en')\n    Returns:\n        A dictionary containing the localized strings\n    \"\"\"\n    # Currently we only have T_SHIRT_NOTIFICATION strings\n    strings = T_SHIRT_NOTIFICATION_STRINGS",
        "detail": "shared.localization",
        "documentation": {}
    },
    {
        "label": "T_SHIRT_NOTIFICATION_STRINGS",
        "kind": 5,
        "importPath": "shared.localization",
        "description": "shared.localization",
        "peekOfCode": "T_SHIRT_NOTIFICATION_STRINGS = {\n    \"en\": {\n        \"title\": \"Hey, it's time to pick up your t-shirt!\",\n        \"body\": \"Go to the gadget desk and ask the staff for your t-shirt. Enjoy it!\"\n    },\n    \"it\": {\n        \"title\": \"Ehi, è il momento di ritirare la tua maglietta!\",\n        \"body\": \"Vai al desk dei gadget e chiedi allo staff la tua maglietta. Goditela!\"\n    }\n}",
        "detail": "shared.localization",
        "documentation": {}
    },
    {
        "label": "firestore_adminCallTransformer",
        "kind": 6,
        "importPath": "venv.bin.fixup_firestore_admin_v1_keywords",
        "description": "venv.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "class firestore_adminCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'bulk_delete_documents': ('name', 'collection_ids', 'namespace_ids', ),\n        'create_backup_schedule': ('parent', 'backup_schedule', ),\n        'create_database': ('parent', 'database', 'database_id', ),\n        'create_index': ('parent', 'index', ),\n        'create_user_creds': ('parent', 'user_creds', 'user_creds_id', ),\n        'delete_backup': ('name', ),\n        'delete_backup_schedule': ('name', ),",
        "detail": "venv.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "venv.bin.fixup_firestore_admin_v1_keywords",
        "description": "venv.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "venv.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "venv.bin.fixup_firestore_admin_v1_keywords",
        "description": "venv.bin.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestore_adminCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "venv.bin.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "firestoreCallTransformer",
        "kind": 6,
        "importPath": "venv.bin.fixup_firestore_v1_keywords",
        "description": "venv.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "class firestoreCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'batch_get_documents': ('database', 'documents', 'mask', 'transaction', 'new_transaction', 'read_time', ),\n        'batch_write': ('database', 'writes', 'labels', ),\n        'begin_transaction': ('database', 'options', ),\n        'commit': ('database', 'writes', 'transaction', ),\n        'create_document': ('parent', 'collection_id', 'document', 'document_id', 'mask', ),\n        'delete_document': ('name', 'current_document', ),\n        'get_document': ('name', 'mask', 'transaction', 'read_time', ),",
        "detail": "venv.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "venv.bin.fixup_firestore_v1_keywords",
        "description": "venv.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "venv.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "venv.bin.fixup_firestore_v1_keywords",
        "description": "venv.bin.fixup_firestore_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestoreCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "venv.bin.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "firestore_client",
        "description": "firestore_client",
        "peekOfCode": "client = firestore.client()",
        "detail": "firestore_client",
        "documentation": {}
    }
]